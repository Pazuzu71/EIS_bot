from crawler import search_last_publication_date
from ftp_search import ftp_search
import os
import telebot
from telebot import types
from config import token


def main():

    parameters = {}

    '''–°–∞–º –±–æ—Ç –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫ –Ω–µ–º—É'''

    bot = telebot.TeleBot(token)

    @bot.message_handler(commands=['start'])
    def start(msg):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add('–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–°')
        bot.send_message(msg.chat.id, '–ë–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!', reply_markup=kb)

    @bot.message_handler(func=lambda msg: msg.text == '–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–°')
    def download_from_ftp(msg):
        kb = types.InlineKeyboardMarkup(row_width=5)
        btn1 = types.InlineKeyboardButton('–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', callback_data='Tulskaja_obl')
        kb.add(btn1)
        bot.send_message(msg.chat.id, text='–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', reply_to_message_id=msg.id, reply_markup=kb)

    @bot.callback_query_handler(func=lambda callback: True)
    def callbacks(callback):

        if callback.data == 'Tulskaja_obl':
            parameters['region'] = callback.data
            kb = types.InlineKeyboardMarkup(row_width=5)
            btn1 = types.InlineKeyboardButton('–ò–∑–≤–µ—â–µ–Ω–∏–µ', callback_data='order')
            btn2 = types.InlineKeyboardButton('–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ', callback_data='contract')
            kb.add(btn1, btn2)
            bot.edit_message_text(text='–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞', chat_id=callback.message.chat.id, message_id=callback.message.id,reply_markup=kb)

        if callback.data in ('order', 'contract'):
            parameters['doctype'] = callback.data
            sent = bot.edit_message_text(text='üëáüëáüëá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: üëáüëáüëá', chat_id=callback.message.chat.id, message_id=callback.message.id)
            bot.register_next_step_handler(sent, get_data)
        #
        # if callback.data == 'contract':
        #     parameters['doctype'] = callback.data
        #     sent = bot.edit_message_text(text='üëáüëáüëá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: üëáüëáüëá', chat_id=callback.message.chat.id, message_id=callback.message.id)
        #     bot.register_next_step_handler(sent, get_data)




    def get_data(msg):
        '''–ü–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –¥–µ–ª–∞–µ–º –¥–µ–ª–∞'''
        parameters['eisdocno'] = msg.text
        print(parameters)

        last_publication_date = search_last_publication_date(doctype=parameters['doctype'],
                                                             eisdocno=parameters['eisdocno'])
        last_publication_date_str = ftp_search(region=parameters['region'], doctype=parameters['doctype'],
                                               eisdocno=parameters['eisdocno'],
                                               last_publication_date=last_publication_date)

        '''–£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤—ã –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ xml'''
        if parameters['doctype'] == 'contract':
            x = 'contracts'
        if parameters['doctype'] == 'order':
            x = 'notifications'
        for path, dirs, files in os.walk(f'Temp//{x}//{parameters["eisdocno"]}//{last_publication_date_str}'):
            if files:
                for file in files:
                    if file.endswith('.zip'):
                        os.unlink(os.path.join(path, file))
                    else:
                        # bot.send_message(msg.chat.id, f'–ù–∞—à–µ–ª {file}')
                        file_to_send = open(os.path.join(path, file), 'rb')
                        bot.send_document(msg.chat.id, document=file_to_send)
                        file_to_send.close()
            else:
                print('–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–∏–ø–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –£–≤—ã...')
                bot.send_message(msg.chat.id, '–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–∏–ø–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –£–≤—ã...')

    # while True:
    #     try:
    #         bot.polling(none_stop=True, interval=0, timeout=20)
    #     except:
    #         print("Exception")
    bot.polling()


if __name__ == '__main__':
    main()