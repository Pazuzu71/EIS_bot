import threading
from crawler import search_last_publication_date
from ftp_search import ftp_search
import os
import telebot
from telebot import types
from config import token
import schedule
from journal_scheduler import journal_update
import time


def main():

    parameters = {}

    '''–°–∞–º –±–æ—Ç –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫ –Ω–µ–º—É'''
    bot = telebot.TeleBot(token)
    # bot = telebot.TeleBot(token, threaded=True)
    # bot.worker_pool = telebot.util.ThreadPool(bot, num_threads=1)


    @bot.message_handler(commands=['start'])
    def start(msg):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add('–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–° 2')
        # kb.add('–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–°', '–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–° 2')
        bot.send_message(msg.chat.id, '–ë–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!', reply_markup=kb)

    # @bot.message_handler(func=lambda msg: msg.text in ('–•–∞—Ä–æ—à –∂–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'))
    @bot.message_handler(func=lambda msg: msg.text == '–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–° 2')
    def download_from_ftp_2(msg):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        btn1 = types.KeyboardButton('–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å')
        kb.add(btn1)
        bot.send_message(msg.chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω', reply_to_message_id=msg.id, reply_markup=kb)

    @bot.message_handler(func=lambda msg: msg.text in ('–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'))
    def document_type_choice(msg):
        parameters['region'] = 'Tulskaja_obl'
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        btn1 = types.KeyboardButton('–ò–∑–≤–µ—â–µ–Ω–∏–µ')
        btn2 = types.KeyboardButton('–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ –∑–∞–∫—É–ø–∫–µ')
        btn3 = types.KeyboardButton('–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ')
        btn4 = types.KeyboardButton('–ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ 2020')
        kb.add(btn1, btn2, btn3, btn4)
        bot.send_message(msg.chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞', reply_to_message_id=msg.id, reply_markup=kb)

    @bot.message_handler(func=lambda msg: msg.text in ('–ò–∑–≤–µ—â–µ–Ω–∏–µ', '–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ –∑–∞–∫—É–ø–∫–µ', '–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ', '–ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ 2020'))
    def eisdocno_request(msg):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        kb.add('–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–° 2')
        if msg.text == '–ò–∑–≤–µ—â–µ–Ω–∏–µ':
            parameters['doctype'] = 'order'
        if msg.text == '–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ –∑–∞–∫—É–ø–∫–µ':
            parameters['doctype'] = 'protocol'
        if msg.text == '–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ':
            parameters['doctype'] = 'contract'
        if msg.text == '–ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ 2020':
            parameters['doctype'] = 'orderplan'
        sent = bot.send_message(msg.chat.id, text='üëáüëáüëá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: üëáüëáüëá', reply_markup=kb)
        # print('sent', sent)
        bot.register_next_step_handler(sent, get_data)


    # @bot.message_handler(func=lambda msg: msg.text == '–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–°')
    # def download_from_ftp(msg):
    #     kb = types.InlineKeyboardMarkup(row_width=5)
    #     btn1 = types.InlineKeyboardButton('–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', callback_data='Tulskaja_obl')
    #     kb.add(btn1)
    #     bot.send_message(msg.chat.id, text='–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', reply_to_message_id=msg.id, reply_markup=kb)
    #
    # @bot.callback_query_handler(func=lambda callback: True)
    # def callbacks(callback):
    #
    #     if callback.data == 'Tulskaja_obl':
    #         parameters['region'] = callback.data
    #         kb = types.InlineKeyboardMarkup(row_width=2)
    #         btn1 = types.InlineKeyboardButton('–ò–∑–≤–µ—â–µ–Ω–∏–µ', callback_data='order')
    #         btn2 = types.InlineKeyboardButton('–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ –∑–∞–∫—É–ø–∫–µ', callback_data='protocol')
    #         btn3 = types.InlineKeyboardButton('–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ', callback_data='contract')
    #         btn4 = types.InlineKeyboardButton('–ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ 2020', callback_data='orderplan')
    #         kb.add(btn1, btn2, btn3, btn4)
    #         bot.edit_message_text(text='–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞', chat_id=callback.message.chat.id, message_id=callback.message.id,reply_markup=kb)
    #
    #     if callback.data in ('order', 'contract', 'orderplan', 'protocol'):
    #         parameters['doctype'] = callback.data
    #         sent = bot.edit_message_text(text='üëáüëáüëá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: üëáüëáüëá', chat_id=callback.message.chat.id, message_id=callback.message.id)
    #         bot.register_next_step_handler(sent, get_data)


    def get_data(msg):
        '''–ü–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –¥–µ–ª–∞–µ–º –¥–µ–ª–∞'''

        parameters['eisdocno'] = msg.text
        print(parameters)
        last_publication_dates = search_last_publication_date(doctype=parameters['doctype'],
                                                             eisdocno=parameters['eisdocno'])
        print('last_publication_dates', last_publication_dates)
        # last_publication_date = search_last_publication_date(doctype=parameters['doctype'],
        #                                                      eisdocno=parameters['eisdocno'])[0]
        for last_publication_date in last_publication_dates:
            last_publication_date_str = ftp_search(region=parameters['region'], doctype=parameters['doctype'],
                                                   eisdocno=parameters['eisdocno'],
                                                   last_publication_date=last_publication_date)

            '''–£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤—ã –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ xml'''
            if parameters['doctype'] == 'contract':
                x = 'contracts'
            if parameters['doctype'] == 'order':
                x = 'notifications'
            if parameters['doctype'] == 'orderplan':
                x = 'plangraphs2020'
            if parameters['doctype'] == 'protocol':
                x = 'protocols'
            for path, dirs, files in os.walk(f'Temp//{x}//{parameters["eisdocno"]}//{last_publication_date_str}'):
                if files:
                    for file in files:
                        if file.endswith('.zip'):
                            os.unlink(os.path.join(path, file))
                        else:
                            # bot.send_message(msg.chat.id, f'–ù–∞—à–µ–ª {file}')
                            file_to_send = open(os.path.join(path, file), 'rb')
                            bot.send_document(msg.chat.id, document=file_to_send)
                            file_to_send.close()
                elif msg.text in ('–ò–∑–≤–µ—â–µ–Ω–∏–µ', '–í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ –∑–∞–∫—É–ø–∫–µ', '–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ', '–ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ 2020'):
                    bot.send_message(msg.chat.id, '–•–∞—Ä–æ—à –∂–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')
                elif msg.text in ('–•–æ—á—É —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —Ñ—Ç–ø –ï–ò–° 2'):
                    bot.send_message(msg.chat.id, '–•–∞, –æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ. –ï—â–µ —Ä–∞–∑ –Ω–∞–∂–º–∏.')
                else:
                    print('–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–∏–ø–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –£–≤—ã...')
                    bot.send_message(msg.chat.id,
                                     '–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–∏–ø–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –£–≤—ã...')
                if not os.listdir(f'Temp//{x}//{parameters["eisdocno"]}//{last_publication_date_str}'):
                    bot.send_message(msg.chat.id,
                                     f'–í–æ–∑–º–æ–∂–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞ —Ñ—Ç–ø –µ—â–µ –Ω–µ –≤—ã–ª–æ–∂–µ–Ω. –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {last_publication_date_str}')

    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as ex:
            print('Exception')
            print('Exception', ex)
            print("Exception", parameters)

    # bot.polling()

def journal_update_start():
    schedule.every().day.at("19:00").do(journal_update)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    thr1 = threading.Thread(target=journal_update_start)
    thr1.start()
    main()